How to make a new Sage release, by Jeroen Demeyer

== Tickets with positive review ==

Decide which tickets you want to merge in the new release:
http://trac.sagemath.org/sage_trac/report/40

== The merge script ==

Create a new directory for your Sage release (for official releases,
this is /home/release/sage-$VERSION/ but you can also make a private
release in a different directory).  This directory will be called $DIST
in the following discussion.  Create a merge script (usually called
"merge") in the $DIST directory.  You can look for inspiration at
/home/release/sage-$OLDVERSION/merge

Note that I usually base new Sage releases on the last *stable* release.
For example, sage-4.7.1.alpha2 is based on sage-4.7, not on
sage-4.7.1.alpha1.  In practice, this means you should copy
sage-4.7.1.alpha1/merge to sage-4.7.1.alpha2/merge and append to that.
It is known that this procedure can create problems with upgrading
*from* (not to) development releases.  However, other release managers
may do differently and base each alpha on the previous alpha.

For more technical aspects of the merger scripts, see the file README
in this directory.

== Running the merger ==

From $DIST, type "./merge".  This will do the following:
1) download and extract old Sage version in
   /scratch/`whoami`/merger/sage-$VERSION
2) extract SAGELIB (devel/sage), SCRIPTS (local/bin), SAGE_ROOT (.),
   EXTCODE (data/extcode) repositories in order to merge new patches.
3) now the merge script will be read and patches, spkgs,... will be
   applied.
4) the release notes are created in logs/sage-$VERSION.txt and
   logs/tickets.html.  If something goes wrong in the following steps,
   it can be useful to look at these files to have an overview of the
   tickets.
5) Sage is built (including the html and pdf documentation) from
   scratch.  For easier debugging, this is currently done without
   SAGE_PARALLEL_SPKG_BUILD.
6) make ptest and make ptestlong are run, any failures are reported.
7) a source and binary tarball are created and automatically put
   in $DIST, together with the release notes.

The merger scripts contain lots of sanity checks that everything is as
it should be, it will abort when something is wrong.  In particular, the
Sage tarball in $DIST will only be created and the release notes copied
if there were no issues.
For debugging, you can look at the various logfiles in $DIST/logs or at
the Sage build in /release/merger/sage-$VERSION

== Back to Trac ==

At this point, I usually mark all tickets on Trac as "closed".  This is
most easily done using the file $DIST/tickets.html

== Buildbot ==

After building a new Sage release, it should be tested on the buildbot.
Run ./merge --buildbot to configure the buildbot such that it knows
which version to build. If there are failures, try to find out which
ticket caused it, reopen it on Trac, remove it (or comment it out) from
the merge script and run the merge script again.

== Release ==

If a Sage build survives the buildbot and is really ready for releasing,
you should do the following:
0) double-check $DIST/tickets.html to make sure everything looks okay
   and all tickets are actually closed (if not closed, the status will
   be mentioned in tickets.html)
1) run ./merge --release
2) send an announcement to sage-release (usually, I simply send the
   contents of $DIST/sage-$VERSION.txt)

== Final release ==

For final, stable releases, start with the same procedure as above.  Be
sure to check $DIST/sage-$VERSION.txt because that is in a different
format from the development releases.  Check for duplicates in the
contributor list and change Author/Reviewer names on Trac accordingly.

Notify Minh Nguyen <nguyenminh2@gmail.com> and Harald Schilly
<harald.schilly@gmail.com>, they will update the main Sage website and
mirrors.  Wait for a few days until everything is updated and then send
an announcement to sage-announce.
